"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class RecognizeAdvancedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            needSortPage: 'NeedSortPage',
            noStamp: 'NoStamp',
            outputCharInfo: 'OutputCharInfo',
            outputFigure: 'OutputFigure',
            outputTable: 'OutputTable',
            paragraph: 'Paragraph',
            row: 'Row',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            needSortPage: 'boolean',
            noStamp: 'boolean',
            outputCharInfo: 'boolean',
            outputFigure: 'boolean',
            outputTable: 'boolean',
            paragraph: 'boolean',
            row: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeAdvancedRequest = RecognizeAdvancedRequest;
class RecognizeAdvancedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeAdvancedResponseBody = RecognizeAdvancedResponseBody;
class RecognizeAdvancedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeAdvancedResponseBody,
        };
    }
}
exports.RecognizeAdvancedResponse = RecognizeAdvancedResponse;
class RecognizeAirItineraryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeAirItineraryRequest = RecognizeAirItineraryRequest;
class RecognizeAirItineraryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeAirItineraryResponseBody = RecognizeAirItineraryResponseBody;
class RecognizeAirItineraryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeAirItineraryResponseBody,
        };
    }
}
exports.RecognizeAirItineraryResponse = RecognizeAirItineraryResponse;
class RecognizeBankAcceptanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBankAcceptanceRequest = RecognizeBankAcceptanceRequest;
class RecognizeBankAcceptanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBankAcceptanceResponseBody = RecognizeBankAcceptanceResponseBody;
class RecognizeBankAcceptanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBankAcceptanceResponseBody,
        };
    }
}
exports.RecognizeBankAcceptanceResponse = RecognizeBankAcceptanceResponse;
class RecognizeBankAccountLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBankAccountLicenseRequest = RecognizeBankAccountLicenseRequest;
class RecognizeBankAccountLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBankAccountLicenseResponseBody = RecognizeBankAccountLicenseResponseBody;
class RecognizeBankAccountLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBankAccountLicenseResponseBody,
        };
    }
}
exports.RecognizeBankAccountLicenseResponse = RecognizeBankAccountLicenseResponse;
class RecognizeBankCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBankCardRequest = RecognizeBankCardRequest;
class RecognizeBankCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBankCardResponseBody = RecognizeBankCardResponseBody;
class RecognizeBankCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBankCardResponseBody,
        };
    }
}
exports.RecognizeBankCardResponse = RecognizeBankCardResponse;
class RecognizeBasicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBasicRequest = RecognizeBasicRequest;
class RecognizeBasicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBasicResponseBody = RecognizeBasicResponseBody;
class RecognizeBasicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBasicResponseBody,
        };
    }
}
exports.RecognizeBasicResponse = RecognizeBasicResponse;
class RecognizeBatchRecognizeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageName: 'ImageName',
            imageOp: 'ImageOp',
            imageOssKey: 'ImageOssKey',
            needRotate: 'NeedRotate',
            needSortPage: 'NeedSortPage',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
        };
    }
    static types() {
        return {
            imageName: 'string',
            imageOp: 'string',
            imageOssKey: 'string',
            needRotate: 'boolean',
            needSortPage: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
        };
    }
}
exports.RecognizeBatchRecognizeRequest = RecognizeBatchRecognizeRequest;
class RecognizeBatchRecognizeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBatchRecognizeResponseBody = RecognizeBatchRecognizeResponseBody;
class RecognizeBatchRecognizeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBatchRecognizeResponseBody,
        };
    }
}
exports.RecognizeBatchRecognizeResponse = RecognizeBatchRecognizeResponse;
class RecognizeBirthCertificationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBirthCertificationRequest = RecognizeBirthCertificationRequest;
class RecognizeBirthCertificationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBirthCertificationResponseBody = RecognizeBirthCertificationResponseBody;
class RecognizeBirthCertificationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBirthCertificationResponseBody,
        };
    }
}
exports.RecognizeBirthCertificationResponse = RecognizeBirthCertificationResponse;
class RecognizeBusShipTicketRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBusShipTicketRequest = RecognizeBusShipTicketRequest;
class RecognizeBusShipTicketResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBusShipTicketResponseBody = RecognizeBusShipTicketResponseBody;
class RecognizeBusShipTicketResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBusShipTicketResponseBody,
        };
    }
}
exports.RecognizeBusShipTicketResponse = RecognizeBusShipTicketResponse;
class RecognizeBusinessLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeBusinessLicenseRequest = RecognizeBusinessLicenseRequest;
class RecognizeBusinessLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeBusinessLicenseResponseBody = RecognizeBusinessLicenseResponseBody;
class RecognizeBusinessLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeBusinessLicenseResponseBody,
        };
    }
}
exports.RecognizeBusinessLicenseResponse = RecognizeBusinessLicenseResponse;
class RecognizeCarInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCarInvoiceRequest = RecognizeCarInvoiceRequest;
class RecognizeCarInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCarInvoiceResponseBody = RecognizeCarInvoiceResponseBody;
class RecognizeCarInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCarInvoiceResponseBody,
        };
    }
}
exports.RecognizeCarInvoiceResponse = RecognizeCarInvoiceResponse;
class RecognizeCarNumberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCarNumberRequest = RecognizeCarNumberRequest;
class RecognizeCarNumberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCarNumberResponseBody = RecognizeCarNumberResponseBody;
class RecognizeCarNumberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCarNumberResponseBody,
        };
    }
}
exports.RecognizeCarNumberResponse = RecognizeCarNumberResponse;
class RecognizeCarVinCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCarVinCodeRequest = RecognizeCarVinCodeRequest;
class RecognizeCarVinCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCarVinCodeResponseBody = RecognizeCarVinCodeResponseBody;
class RecognizeCarVinCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCarVinCodeResponseBody,
        };
    }
}
exports.RecognizeCarVinCodeResponse = RecognizeCarVinCodeResponse;
class RecognizeChinesePassportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outputFigure: 'OutputFigure',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            outputFigure: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeChinesePassportRequest = RecognizeChinesePassportRequest;
class RecognizeChinesePassportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeChinesePassportResponseBody = RecognizeChinesePassportResponseBody;
class RecognizeChinesePassportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeChinesePassportResponseBody,
        };
    }
}
exports.RecognizeChinesePassportResponse = RecognizeChinesePassportResponse;
class RecognizeCommonPrintedInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCommonPrintedInvoiceRequest = RecognizeCommonPrintedInvoiceRequest;
class RecognizeCommonPrintedInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCommonPrintedInvoiceResponseBody = RecognizeCommonPrintedInvoiceResponseBody;
class RecognizeCommonPrintedInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCommonPrintedInvoiceResponseBody,
        };
    }
}
exports.RecognizeCommonPrintedInvoiceResponse = RecognizeCommonPrintedInvoiceResponse;
class RecognizeCosmeticProduceLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCosmeticProduceLicenseRequest = RecognizeCosmeticProduceLicenseRequest;
class RecognizeCosmeticProduceLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCosmeticProduceLicenseResponseBody = RecognizeCosmeticProduceLicenseResponseBody;
class RecognizeCosmeticProduceLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCosmeticProduceLicenseResponseBody,
        };
    }
}
exports.RecognizeCosmeticProduceLicenseResponse = RecognizeCosmeticProduceLicenseResponse;
class RecognizeCovidTestReportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCovidTestReportRequest = RecognizeCovidTestReportRequest;
class RecognizeCovidTestReportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCovidTestReportResponseBody = RecognizeCovidTestReportResponseBody;
class RecognizeCovidTestReportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCovidTestReportResponseBody,
        };
    }
}
exports.RecognizeCovidTestReportResponse = RecognizeCovidTestReportResponse;
class RecognizeCtwoMedicalDeviceManageLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeCtwoMedicalDeviceManageLicenseRequest = RecognizeCtwoMedicalDeviceManageLicenseRequest;
class RecognizeCtwoMedicalDeviceManageLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeCtwoMedicalDeviceManageLicenseResponseBody = RecognizeCtwoMedicalDeviceManageLicenseResponseBody;
class RecognizeCtwoMedicalDeviceManageLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeCtwoMedicalDeviceManageLicenseResponseBody,
        };
    }
}
exports.RecognizeCtwoMedicalDeviceManageLicenseResponse = RecognizeCtwoMedicalDeviceManageLicenseResponse;
class RecognizeDeleteExcelRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'Id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.RecognizeDeleteExcelRecordRequest = RecognizeDeleteExcelRecordRequest;
class RecognizeDeleteExcelRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeDeleteExcelRecordResponseBody = RecognizeDeleteExcelRecordResponseBody;
class RecognizeDeleteExcelRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeDeleteExcelRecordResponseBody,
        };
    }
}
exports.RecognizeDeleteExcelRecordResponse = RecognizeDeleteExcelRecordResponse;
class RecognizeDrivingLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeDrivingLicenseRequest = RecognizeDrivingLicenseRequest;
class RecognizeDrivingLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeDrivingLicenseResponseBody = RecognizeDrivingLicenseResponseBody;
class RecognizeDrivingLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeDrivingLicenseResponseBody,
        };
    }
}
exports.RecognizeDrivingLicenseResponse = RecognizeDrivingLicenseResponse;
class RecognizeEduFormulaRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduFormulaRequest = RecognizeEduFormulaRequest;
class RecognizeEduFormulaResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduFormulaResponseBody = RecognizeEduFormulaResponseBody;
class RecognizeEduFormulaResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduFormulaResponseBody,
        };
    }
}
exports.RecognizeEduFormulaResponse = RecognizeEduFormulaResponse;
class RecognizeEduOralCalculationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduOralCalculationRequest = RecognizeEduOralCalculationRequest;
class RecognizeEduOralCalculationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduOralCalculationResponseBody = RecognizeEduOralCalculationResponseBody;
class RecognizeEduOralCalculationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduOralCalculationResponseBody,
        };
    }
}
exports.RecognizeEduOralCalculationResponse = RecognizeEduOralCalculationResponse;
class RecognizeEduPaperCutRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cutType: 'CutType',
            imageType: 'ImageType',
            subject: 'Subject',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            cutType: 'string',
            imageType: 'string',
            subject: 'string',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduPaperCutRequest = RecognizeEduPaperCutRequest;
class RecognizeEduPaperCutResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduPaperCutResponseBody = RecognizeEduPaperCutResponseBody;
class RecognizeEduPaperCutResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduPaperCutResponseBody,
        };
    }
}
exports.RecognizeEduPaperCutResponse = RecognizeEduPaperCutResponse;
class RecognizeEduPaperOcrRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageType: 'ImageType',
            outputOricoord: 'OutputOricoord',
            subject: 'Subject',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            imageType: 'string',
            outputOricoord: 'boolean',
            subject: 'string',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduPaperOcrRequest = RecognizeEduPaperOcrRequest;
class RecognizeEduPaperOcrResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduPaperOcrResponseBody = RecognizeEduPaperOcrResponseBody;
class RecognizeEduPaperOcrResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduPaperOcrResponseBody,
        };
    }
}
exports.RecognizeEduPaperOcrResponse = RecognizeEduPaperOcrResponse;
class RecognizeEduPaperStructedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            subject: 'Subject',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            subject: 'string',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduPaperStructedRequest = RecognizeEduPaperStructedRequest;
class RecognizeEduPaperStructedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduPaperStructedResponseBody = RecognizeEduPaperStructedResponseBody;
class RecognizeEduPaperStructedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduPaperStructedResponseBody,
        };
    }
}
exports.RecognizeEduPaperStructedResponse = RecognizeEduPaperStructedResponse;
class RecognizeEduQuestionOcrRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEduQuestionOcrRequest = RecognizeEduQuestionOcrRequest;
class RecognizeEduQuestionOcrResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEduQuestionOcrResponseBody = RecognizeEduQuestionOcrResponseBody;
class RecognizeEduQuestionOcrResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEduQuestionOcrResponseBody,
        };
    }
}
exports.RecognizeEduQuestionOcrResponse = RecognizeEduQuestionOcrResponse;
class RecognizeEnglishRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEnglishRequest = RecognizeEnglishRequest;
class RecognizeEnglishResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEnglishResponseBody = RecognizeEnglishResponseBody;
class RecognizeEnglishResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEnglishResponseBody,
        };
    }
}
exports.RecognizeEnglishResponse = RecognizeEnglishResponse;
class RecognizeEstateCertificationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeEstateCertificationRequest = RecognizeEstateCertificationRequest;
class RecognizeEstateCertificationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeEstateCertificationResponseBody = RecognizeEstateCertificationResponseBody;
class RecognizeEstateCertificationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeEstateCertificationResponseBody,
        };
    }
}
exports.RecognizeEstateCertificationResponse = RecognizeEstateCertificationResponse;
class RecognizeExcelExportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileName: 'FileName',
            imageOp: 'ImageOp',
            ocrImageCount: 'OcrImageCount',
            ocrResult: 'OcrResult',
            ocrType: 'OcrType',
        };
    }
    static types() {
        return {
            fileName: 'string',
            imageOp: 'string',
            ocrImageCount: 'number',
            ocrResult: 'string',
            ocrType: 'string',
        };
    }
}
exports.RecognizeExcelExportRequest = RecognizeExcelExportRequest;
class RecognizeExcelExportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeExcelExportResponseBody = RecognizeExcelExportResponseBody;
class RecognizeExcelExportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeExcelExportResponseBody,
        };
    }
}
exports.RecognizeExcelExportResponse = RecognizeExcelExportResponse;
class RecognizeExcelRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currPage: 'CurrPage',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currPage: 'number',
            pageSize: 'number',
        };
    }
}
exports.RecognizeExcelRecordRequest = RecognizeExcelRecordRequest;
class RecognizeExcelRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeExcelRecordResponseBody = RecognizeExcelRecordResponseBody;
class RecognizeExcelRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeExcelRecordResponseBody,
        };
    }
}
exports.RecognizeExcelRecordResponse = RecognizeExcelRecordResponse;
class RecognizeExitEntryPermitToHKRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outputFigure: 'OutputFigure',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            outputFigure: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeExitEntryPermitToHKRequest = RecognizeExitEntryPermitToHKRequest;
class RecognizeExitEntryPermitToHKResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeExitEntryPermitToHKResponseBody = RecognizeExitEntryPermitToHKResponseBody;
class RecognizeExitEntryPermitToHKResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeExitEntryPermitToHKResponseBody,
        };
    }
}
exports.RecognizeExitEntryPermitToHKResponse = RecognizeExitEntryPermitToHKResponse;
class RecognizeExitEntryPermitToMainlandRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outputFigure: 'OutputFigure',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            outputFigure: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeExitEntryPermitToMainlandRequest = RecognizeExitEntryPermitToMainlandRequest;
class RecognizeExitEntryPermitToMainlandResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeExitEntryPermitToMainlandResponseBody = RecognizeExitEntryPermitToMainlandResponseBody;
class RecognizeExitEntryPermitToMainlandResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeExitEntryPermitToMainlandResponseBody,
        };
    }
}
exports.RecognizeExitEntryPermitToMainlandResponse = RecognizeExitEntryPermitToMainlandResponse;
class RecognizeFoodManageLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeFoodManageLicenseRequest = RecognizeFoodManageLicenseRequest;
class RecognizeFoodManageLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeFoodManageLicenseResponseBody = RecognizeFoodManageLicenseResponseBody;
class RecognizeFoodManageLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeFoodManageLicenseResponseBody,
        };
    }
}
exports.RecognizeFoodManageLicenseResponse = RecognizeFoodManageLicenseResponse;
class RecognizeFoodProduceLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeFoodProduceLicenseRequest = RecognizeFoodProduceLicenseRequest;
class RecognizeFoodProduceLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeFoodProduceLicenseResponseBody = RecognizeFoodProduceLicenseResponseBody;
class RecognizeFoodProduceLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeFoodProduceLicenseResponseBody,
        };
    }
}
exports.RecognizeFoodProduceLicenseResponse = RecognizeFoodProduceLicenseResponse;
class RecognizeGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeGeneralRequest = RecognizeGeneralRequest;
class RecognizeGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeGeneralResponseBody = RecognizeGeneralResponseBody;
class RecognizeGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeGeneralResponseBody,
        };
    }
}
exports.RecognizeGeneralResponse = RecognizeGeneralResponse;
class RecognizeHandwritingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            needSortPage: 'NeedSortPage',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            needSortPage: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeHandwritingRequest = RecognizeHandwritingRequest;
class RecognizeHandwritingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeHandwritingResponseBody = RecognizeHandwritingResponseBody;
class RecognizeHandwritingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeHandwritingResponseBody,
        };
    }
}
exports.RecognizeHandwritingResponse = RecognizeHandwritingResponse;
class RecognizeHealthCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeHealthCodeRequest = RecognizeHealthCodeRequest;
class RecognizeHealthCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeHealthCodeResponseBody = RecognizeHealthCodeResponseBody;
class RecognizeHealthCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeHealthCodeResponseBody,
        };
    }
}
exports.RecognizeHealthCodeResponse = RecognizeHealthCodeResponse;
class RecognizeHotelConsumeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeHotelConsumeRequest = RecognizeHotelConsumeRequest;
class RecognizeHotelConsumeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeHotelConsumeResponseBody = RecognizeHotelConsumeResponseBody;
class RecognizeHotelConsumeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeHotelConsumeResponseBody,
        };
    }
}
exports.RecognizeHotelConsumeResponse = RecognizeHotelConsumeResponse;
class RecognizeHouseholdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isResidentPage: 'IsResidentPage',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            isResidentPage: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeHouseholdRequest = RecognizeHouseholdRequest;
class RecognizeHouseholdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeHouseholdResponseBody = RecognizeHouseholdResponseBody;
class RecognizeHouseholdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeHouseholdResponseBody,
        };
    }
}
exports.RecognizeHouseholdResponse = RecognizeHouseholdResponse;
class RecognizeIdcardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outputFigure: 'OutputFigure',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            outputFigure: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeIdcardRequest = RecognizeIdcardRequest;
class RecognizeIdcardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeIdcardResponseBody = RecognizeIdcardResponseBody;
class RecognizeIdcardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeIdcardResponseBody,
        };
    }
}
exports.RecognizeIdcardResponse = RecognizeIdcardResponse;
class RecognizeInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeInvoiceRequest = RecognizeInvoiceRequest;
class RecognizeInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeInvoiceResponseBody = RecognizeInvoiceResponseBody;
class RecognizeInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeInvoiceResponseBody,
        };
    }
}
exports.RecognizeInvoiceResponse = RecognizeInvoiceResponse;
class RecognizeJanpaneseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeJanpaneseRequest = RecognizeJanpaneseRequest;
class RecognizeJanpaneseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeJanpaneseResponseBody = RecognizeJanpaneseResponseBody;
class RecognizeJanpaneseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeJanpaneseResponseBody,
        };
    }
}
exports.RecognizeJanpaneseResponse = RecognizeJanpaneseResponse;
class RecognizeKoreanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeKoreanRequest = RecognizeKoreanRequest;
class RecognizeKoreanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeKoreanResponseBody = RecognizeKoreanResponseBody;
class RecognizeKoreanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeKoreanResponseBody,
        };
    }
}
exports.RecognizeKoreanResponse = RecognizeKoreanResponse;
class RecognizeLatinRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeLatinRequest = RecognizeLatinRequest;
class RecognizeLatinResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeLatinResponseBody = RecognizeLatinResponseBody;
class RecognizeLatinResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeLatinResponseBody,
        };
    }
}
exports.RecognizeLatinResponse = RecognizeLatinResponse;
class RecognizeMedicalDeviceManageLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeMedicalDeviceManageLicenseRequest = RecognizeMedicalDeviceManageLicenseRequest;
class RecognizeMedicalDeviceManageLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeMedicalDeviceManageLicenseResponseBody = RecognizeMedicalDeviceManageLicenseResponseBody;
class RecognizeMedicalDeviceManageLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeMedicalDeviceManageLicenseResponseBody,
        };
    }
}
exports.RecognizeMedicalDeviceManageLicenseResponse = RecognizeMedicalDeviceManageLicenseResponse;
class RecognizeMedicalDeviceProduceLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeMedicalDeviceProduceLicenseRequest = RecognizeMedicalDeviceProduceLicenseRequest;
class RecognizeMedicalDeviceProduceLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeMedicalDeviceProduceLicenseResponseBody = RecognizeMedicalDeviceProduceLicenseResponseBody;
class RecognizeMedicalDeviceProduceLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeMedicalDeviceProduceLicenseResponseBody,
        };
    }
}
exports.RecognizeMedicalDeviceProduceLicenseResponse = RecognizeMedicalDeviceProduceLicenseResponse;
class RecognizeMixedInvoicesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeMixedInvoicesRequest = RecognizeMixedInvoicesRequest;
class RecognizeMixedInvoicesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeMixedInvoicesResponseBody = RecognizeMixedInvoicesResponseBody;
class RecognizeMixedInvoicesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeMixedInvoicesResponseBody,
        };
    }
}
exports.RecognizeMixedInvoicesResponse = RecognizeMixedInvoicesResponse;
class RecognizeMultiLanguageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            languages: 'Languages',
            needRotate: 'NeedRotate',
            needSortPage: 'NeedSortPage',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            languages: { 'type': 'array', 'itemType': 'string' },
            needRotate: 'boolean',
            needSortPage: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeMultiLanguageRequest = RecognizeMultiLanguageRequest;
class RecognizeMultiLanguageShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            languagesShrink: 'Languages',
            needRotate: 'NeedRotate',
            needSortPage: 'NeedSortPage',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            languagesShrink: 'string',
            needRotate: 'boolean',
            needSortPage: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeMultiLanguageShrinkRequest = RecognizeMultiLanguageShrinkRequest;
class RecognizeMultiLanguageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeMultiLanguageResponseBody = RecognizeMultiLanguageResponseBody;
class RecognizeMultiLanguageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeMultiLanguageResponseBody,
        };
    }
}
exports.RecognizeMultiLanguageResponse = RecognizeMultiLanguageResponse;
class RecognizeNonTaxInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeNonTaxInvoiceRequest = RecognizeNonTaxInvoiceRequest;
class RecognizeNonTaxInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeNonTaxInvoiceResponseBody = RecognizeNonTaxInvoiceResponseBody;
class RecognizeNonTaxInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeNonTaxInvoiceResponseBody,
        };
    }
}
exports.RecognizeNonTaxInvoiceResponse = RecognizeNonTaxInvoiceResponse;
class RecognizePassportRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizePassportRequest = RecognizePassportRequest;
class RecognizePassportResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizePassportResponseBody = RecognizePassportResponseBody;
class RecognizePassportResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizePassportResponseBody,
        };
    }
}
exports.RecognizePassportResponse = RecognizePassportResponse;
class RecognizePaymentRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizePaymentRecordRequest = RecognizePaymentRecordRequest;
class RecognizePaymentRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizePaymentRecordResponseBody = RecognizePaymentRecordResponseBody;
class RecognizePaymentRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizePaymentRecordResponseBody,
        };
    }
}
exports.RecognizePaymentRecordResponse = RecognizePaymentRecordResponse;
class RecognizePurchaseRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizePurchaseRecordRequest = RecognizePurchaseRecordRequest;
class RecognizePurchaseRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizePurchaseRecordResponseBody = RecognizePurchaseRecordResponseBody;
class RecognizePurchaseRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizePurchaseRecordResponseBody,
        };
    }
}
exports.RecognizePurchaseRecordResponse = RecognizePurchaseRecordResponse;
class RecognizeQuotaInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeQuotaInvoiceRequest = RecognizeQuotaInvoiceRequest;
class RecognizeQuotaInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeQuotaInvoiceResponseBody = RecognizeQuotaInvoiceResponseBody;
class RecognizeQuotaInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeQuotaInvoiceResponseBody,
        };
    }
}
exports.RecognizeQuotaInvoiceResponse = RecognizeQuotaInvoiceResponse;
class RecognizeRideHailingItineraryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeRideHailingItineraryRequest = RecognizeRideHailingItineraryRequest;
class RecognizeRideHailingItineraryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeRideHailingItineraryResponseBody = RecognizeRideHailingItineraryResponseBody;
class RecognizeRideHailingItineraryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeRideHailingItineraryResponseBody,
        };
    }
}
exports.RecognizeRideHailingItineraryResponse = RecognizeRideHailingItineraryResponse;
class RecognizeRollTicketRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeRollTicketRequest = RecognizeRollTicketRequest;
class RecognizeRollTicketResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeRollTicketResponseBody = RecognizeRollTicketResponseBody;
class RecognizeRollTicketResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeRollTicketResponseBody,
        };
    }
}
exports.RecognizeRollTicketResponse = RecognizeRollTicketResponse;
class RecognizeRussianRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeRussianRequest = RecognizeRussianRequest;
class RecognizeRussianResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeRussianResponseBody = RecognizeRussianResponseBody;
class RecognizeRussianResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeRussianResponseBody,
        };
    }
}
exports.RecognizeRussianResponse = RecognizeRussianResponse;
class RecognizeShoppingReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeShoppingReceiptRequest = RecognizeShoppingReceiptRequest;
class RecognizeShoppingReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeShoppingReceiptResponseBody = RecognizeShoppingReceiptResponseBody;
class RecognizeShoppingReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeShoppingReceiptResponseBody,
        };
    }
}
exports.RecognizeShoppingReceiptResponse = RecognizeShoppingReceiptResponse;
class RecognizeSocialSecurityCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeSocialSecurityCardRequest = RecognizeSocialSecurityCardRequest;
class RecognizeSocialSecurityCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeSocialSecurityCardResponseBody = RecognizeSocialSecurityCardResponseBody;
class RecognizeSocialSecurityCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeSocialSecurityCardResponseBody,
        };
    }
}
exports.RecognizeSocialSecurityCardResponse = RecognizeSocialSecurityCardResponse;
class RecognizeSocialSecurityCardVersionIIRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeSocialSecurityCardVersionIIRequest = RecognizeSocialSecurityCardVersionIIRequest;
class RecognizeSocialSecurityCardVersionIIResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeSocialSecurityCardVersionIIResponseBody = RecognizeSocialSecurityCardVersionIIResponseBody;
class RecognizeSocialSecurityCardVersionIIResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeSocialSecurityCardVersionIIResponseBody,
        };
    }
}
exports.RecognizeSocialSecurityCardVersionIIResponse = RecognizeSocialSecurityCardVersionIIResponse;
class RecognizeTableOcrRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lineLess: 'LineLess',
            needRotate: 'NeedRotate',
            skipDetection: 'SkipDetection',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            lineLess: 'boolean',
            needRotate: 'boolean',
            skipDetection: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTableOcrRequest = RecognizeTableOcrRequest;
class RecognizeTableOcrResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTableOcrResponseBody = RecognizeTableOcrResponseBody;
class RecognizeTableOcrResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTableOcrResponseBody,
        };
    }
}
exports.RecognizeTableOcrResponse = RecognizeTableOcrResponse;
class RecognizeTaxClearanceCertificateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTaxClearanceCertificateRequest = RecognizeTaxClearanceCertificateRequest;
class RecognizeTaxClearanceCertificateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTaxClearanceCertificateResponseBody = RecognizeTaxClearanceCertificateResponseBody;
class RecognizeTaxClearanceCertificateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTaxClearanceCertificateResponseBody,
        };
    }
}
exports.RecognizeTaxClearanceCertificateResponse = RecognizeTaxClearanceCertificateResponse;
class RecognizeTaxiInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTaxiInvoiceRequest = RecognizeTaxiInvoiceRequest;
class RecognizeTaxiInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTaxiInvoiceResponseBody = RecognizeTaxiInvoiceResponseBody;
class RecognizeTaxiInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTaxiInvoiceResponseBody,
        };
    }
}
exports.RecognizeTaxiInvoiceResponse = RecognizeTaxiInvoiceResponse;
class RecognizeThaiRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            needRotate: 'NeedRotate',
            outputCharInfo: 'OutputCharInfo',
            outputTable: 'OutputTable',
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            needRotate: 'boolean',
            outputCharInfo: 'boolean',
            outputTable: 'boolean',
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeThaiRequest = RecognizeThaiRequest;
class RecognizeThaiResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeThaiResponseBody = RecognizeThaiResponseBody;
class RecognizeThaiResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeThaiResponseBody,
        };
    }
}
exports.RecognizeThaiResponse = RecognizeThaiResponse;
class RecognizeTollInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTollInvoiceRequest = RecognizeTollInvoiceRequest;
class RecognizeTollInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTollInvoiceResponseBody = RecognizeTollInvoiceResponseBody;
class RecognizeTollInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTollInvoiceResponseBody,
        };
    }
}
exports.RecognizeTollInvoiceResponse = RecognizeTollInvoiceResponse;
class RecognizeTradeMarkCertificationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTradeMarkCertificationRequest = RecognizeTradeMarkCertificationRequest;
class RecognizeTradeMarkCertificationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTradeMarkCertificationResponseBody = RecognizeTradeMarkCertificationResponseBody;
class RecognizeTradeMarkCertificationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTradeMarkCertificationResponseBody,
        };
    }
}
exports.RecognizeTradeMarkCertificationResponse = RecognizeTradeMarkCertificationResponse;
class RecognizeTrainInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTrainInvoiceRequest = RecognizeTrainInvoiceRequest;
class RecognizeTrainInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTrainInvoiceResponseBody = RecognizeTrainInvoiceResponseBody;
class RecognizeTrainInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTrainInvoiceResponseBody,
        };
    }
}
exports.RecognizeTrainInvoiceResponse = RecognizeTrainInvoiceResponse;
class RecognizeTravelCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeTravelCardRequest = RecognizeTravelCardRequest;
class RecognizeTravelCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeTravelCardResponseBody = RecognizeTravelCardResponseBody;
class RecognizeTravelCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeTravelCardResponseBody,
        };
    }
}
exports.RecognizeTravelCardResponse = RecognizeTravelCardResponse;
class RecognizeUsedCarInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeUsedCarInvoiceRequest = RecognizeUsedCarInvoiceRequest;
class RecognizeUsedCarInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeUsedCarInvoiceResponseBody = RecognizeUsedCarInvoiceResponseBody;
class RecognizeUsedCarInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeUsedCarInvoiceResponseBody,
        };
    }
}
exports.RecognizeUsedCarInvoiceResponse = RecognizeUsedCarInvoiceResponse;
class RecognizeVehicleCertificationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeVehicleCertificationRequest = RecognizeVehicleCertificationRequest;
class RecognizeVehicleCertificationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeVehicleCertificationResponseBody = RecognizeVehicleCertificationResponseBody;
class RecognizeVehicleCertificationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeVehicleCertificationResponseBody,
        };
    }
}
exports.RecognizeVehicleCertificationResponse = RecognizeVehicleCertificationResponse;
class RecognizeVehicleLicenseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeVehicleLicenseRequest = RecognizeVehicleLicenseRequest;
class RecognizeVehicleLicenseResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeVehicleLicenseResponseBody = RecognizeVehicleLicenseResponseBody;
class RecognizeVehicleLicenseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeVehicleLicenseResponseBody,
        };
    }
}
exports.RecognizeVehicleLicenseResponse = RecognizeVehicleLicenseResponse;
class RecognizeVehicleRegistrationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeVehicleRegistrationRequest = RecognizeVehicleRegistrationRequest;
class RecognizeVehicleRegistrationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeVehicleRegistrationResponseBody = RecognizeVehicleRegistrationResponseBody;
class RecognizeVehicleRegistrationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeVehicleRegistrationResponseBody,
        };
    }
}
exports.RecognizeVehicleRegistrationResponse = RecognizeVehicleRegistrationResponse;
class RecognizeWaybillRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'Url',
            body: 'body',
        };
    }
    static types() {
        return {
            url: 'string',
            body: 'Readable',
        };
    }
}
exports.RecognizeWaybillRequest = RecognizeWaybillRequest;
class RecognizeWaybillResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
}
exports.RecognizeWaybillResponseBody = RecognizeWaybillResponseBody;
class RecognizeWaybillResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecognizeWaybillResponseBody,
        };
    }
}
exports.RecognizeWaybillResponse = RecognizeWaybillResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("ocr-api", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async recognizeAdvancedWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.needSortPage)) {
            query["NeedSortPage"] = request.needSortPage;
        }
        if (!tea_util_1.default.isUnset(request.noStamp)) {
            query["NoStamp"] = request.noStamp;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputFigure)) {
            query["OutputFigure"] = request.outputFigure;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.paragraph)) {
            query["Paragraph"] = request.paragraph;
        }
        if (!tea_util_1.default.isUnset(request.row)) {
            query["Row"] = request.row;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeAdvanced",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeAdvancedResponse({}));
    }
    async recognizeAdvanced(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeAdvancedWithOptions(request, runtime);
    }
    async recognizeAirItineraryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeAirItinerary",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeAirItineraryResponse({}));
    }
    async recognizeAirItinerary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeAirItineraryWithOptions(request, runtime);
    }
    async recognizeBankAcceptanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBankAcceptance",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBankAcceptanceResponse({}));
    }
    async recognizeBankAcceptance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBankAcceptanceWithOptions(request, runtime);
    }
    async recognizeBankAccountLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBankAccountLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBankAccountLicenseResponse({}));
    }
    async recognizeBankAccountLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBankAccountLicenseWithOptions(request, runtime);
    }
    async recognizeBankCardWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBankCard",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBankCardResponse({}));
    }
    async recognizeBankCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBankCardWithOptions(request, runtime);
    }
    async recognizeBasicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBasic",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBasicResponse({}));
    }
    async recognizeBasic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBasicWithOptions(request, runtime);
    }
    async recognizeBatchRecognizeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.imageName)) {
            query["ImageName"] = request.imageName;
        }
        if (!tea_util_1.default.isUnset(request.imageOp)) {
            query["ImageOp"] = request.imageOp;
        }
        if (!tea_util_1.default.isUnset(request.imageOssKey)) {
            query["ImageOssKey"] = request.imageOssKey;
        }
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.needSortPage)) {
            query["NeedSortPage"] = request.needSortPage;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBatchRecognize",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBatchRecognizeResponse({}));
    }
    async recognizeBatchRecognize(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBatchRecognizeWithOptions(request, runtime);
    }
    async recognizeBirthCertificationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBirthCertification",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBirthCertificationResponse({}));
    }
    async recognizeBirthCertification(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBirthCertificationWithOptions(request, runtime);
    }
    async recognizeBusShipTicketWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBusShipTicket",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBusShipTicketResponse({}));
    }
    async recognizeBusShipTicket(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBusShipTicketWithOptions(request, runtime);
    }
    async recognizeBusinessLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeBusinessLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeBusinessLicenseResponse({}));
    }
    async recognizeBusinessLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeBusinessLicenseWithOptions(request, runtime);
    }
    async recognizeCarInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCarInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCarInvoiceResponse({}));
    }
    async recognizeCarInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCarInvoiceWithOptions(request, runtime);
    }
    async recognizeCarNumberWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCarNumber",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCarNumberResponse({}));
    }
    async recognizeCarNumber(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCarNumberWithOptions(request, runtime);
    }
    async recognizeCarVinCodeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCarVinCode",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCarVinCodeResponse({}));
    }
    async recognizeCarVinCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCarVinCodeWithOptions(request, runtime);
    }
    async recognizeChinesePassportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outputFigure)) {
            query["OutputFigure"] = request.outputFigure;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeChinesePassport",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeChinesePassportResponse({}));
    }
    async recognizeChinesePassport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeChinesePassportWithOptions(request, runtime);
    }
    async recognizeCommonPrintedInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCommonPrintedInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCommonPrintedInvoiceResponse({}));
    }
    async recognizeCommonPrintedInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCommonPrintedInvoiceWithOptions(request, runtime);
    }
    async recognizeCosmeticProduceLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCosmeticProduceLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCosmeticProduceLicenseResponse({}));
    }
    async recognizeCosmeticProduceLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCosmeticProduceLicenseWithOptions(request, runtime);
    }
    async recognizeCovidTestReportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCovidTestReport",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCovidTestReportResponse({}));
    }
    async recognizeCovidTestReport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCovidTestReportWithOptions(request, runtime);
    }
    async recognizeCtwoMedicalDeviceManageLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeCtwoMedicalDeviceManageLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeCtwoMedicalDeviceManageLicenseResponse({}));
    }
    async recognizeCtwoMedicalDeviceManageLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeCtwoMedicalDeviceManageLicenseWithOptions(request, runtime);
    }
    async recognizeDeleteExcelRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["Id"] = request.id;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RecognizeDeleteExcelRecord",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeDeleteExcelRecordResponse({}));
    }
    async recognizeDeleteExcelRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeDeleteExcelRecordWithOptions(request, runtime);
    }
    async recognizeDrivingLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeDrivingLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeDrivingLicenseResponse({}));
    }
    async recognizeDrivingLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeDrivingLicenseWithOptions(request, runtime);
    }
    async recognizeEduFormulaWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduFormula",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduFormulaResponse({}));
    }
    async recognizeEduFormula(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduFormulaWithOptions(request, runtime);
    }
    async recognizeEduOralCalculationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduOralCalculation",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduOralCalculationResponse({}));
    }
    async recognizeEduOralCalculation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduOralCalculationWithOptions(request, runtime);
    }
    async recognizeEduPaperCutWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cutType)) {
            query["CutType"] = request.cutType;
        }
        if (!tea_util_1.default.isUnset(request.imageType)) {
            query["ImageType"] = request.imageType;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            query["Subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduPaperCut",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduPaperCutResponse({}));
    }
    async recognizeEduPaperCut(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduPaperCutWithOptions(request, runtime);
    }
    async recognizeEduPaperOcrWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.imageType)) {
            query["ImageType"] = request.imageType;
        }
        if (!tea_util_1.default.isUnset(request.outputOricoord)) {
            query["OutputOricoord"] = request.outputOricoord;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            query["Subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduPaperOcr",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduPaperOcrResponse({}));
    }
    async recognizeEduPaperOcr(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduPaperOcrWithOptions(request, runtime);
    }
    async recognizeEduPaperStructedWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            query["Subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduPaperStructed",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduPaperStructedResponse({}));
    }
    async recognizeEduPaperStructed(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduPaperStructedWithOptions(request, runtime);
    }
    async recognizeEduQuestionOcrWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEduQuestionOcr",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEduQuestionOcrResponse({}));
    }
    async recognizeEduQuestionOcr(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEduQuestionOcrWithOptions(request, runtime);
    }
    async recognizeEnglishWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEnglish",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEnglishResponse({}));
    }
    async recognizeEnglish(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEnglishWithOptions(request, runtime);
    }
    async recognizeEstateCertificationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeEstateCertification",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeEstateCertificationResponse({}));
    }
    async recognizeEstateCertification(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeEstateCertificationWithOptions(request, runtime);
    }
    async recognizeExcelExportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["FileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.imageOp)) {
            query["ImageOp"] = request.imageOp;
        }
        if (!tea_util_1.default.isUnset(request.ocrImageCount)) {
            query["OcrImageCount"] = request.ocrImageCount;
        }
        if (!tea_util_1.default.isUnset(request.ocrResult)) {
            query["OcrResult"] = request.ocrResult;
        }
        if (!tea_util_1.default.isUnset(request.ocrType)) {
            query["OcrType"] = request.ocrType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RecognizeExcelExport",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeExcelExportResponse({}));
    }
    async recognizeExcelExport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeExcelExportWithOptions(request, runtime);
    }
    async recognizeExcelRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currPage)) {
            query["CurrPage"] = request.currPage;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RecognizeExcelRecord",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeExcelRecordResponse({}));
    }
    async recognizeExcelRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeExcelRecordWithOptions(request, runtime);
    }
    async recognizeExitEntryPermitToHKWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outputFigure)) {
            query["OutputFigure"] = request.outputFigure;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeExitEntryPermitToHK",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeExitEntryPermitToHKResponse({}));
    }
    async recognizeExitEntryPermitToHK(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeExitEntryPermitToHKWithOptions(request, runtime);
    }
    async recognizeExitEntryPermitToMainlandWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outputFigure)) {
            query["OutputFigure"] = request.outputFigure;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeExitEntryPermitToMainland",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeExitEntryPermitToMainlandResponse({}));
    }
    async recognizeExitEntryPermitToMainland(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeExitEntryPermitToMainlandWithOptions(request, runtime);
    }
    async recognizeFoodManageLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeFoodManageLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeFoodManageLicenseResponse({}));
    }
    async recognizeFoodManageLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeFoodManageLicenseWithOptions(request, runtime);
    }
    async recognizeFoodProduceLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeFoodProduceLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeFoodProduceLicenseResponse({}));
    }
    async recognizeFoodProduceLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeFoodProduceLicenseWithOptions(request, runtime);
    }
    async recognizeGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeGeneral",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeGeneralResponse({}));
    }
    async recognizeGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeGeneralWithOptions(request, runtime);
    }
    async recognizeHandwritingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.needSortPage)) {
            query["NeedSortPage"] = request.needSortPage;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeHandwriting",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeHandwritingResponse({}));
    }
    async recognizeHandwriting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeHandwritingWithOptions(request, runtime);
    }
    async recognizeHealthCodeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeHealthCode",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeHealthCodeResponse({}));
    }
    async recognizeHealthCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeHealthCodeWithOptions(request, runtime);
    }
    async recognizeHotelConsumeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeHotelConsume",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeHotelConsumeResponse({}));
    }
    async recognizeHotelConsume(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeHotelConsumeWithOptions(request, runtime);
    }
    async recognizeHouseholdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isResidentPage)) {
            query["IsResidentPage"] = request.isResidentPage;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeHousehold",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeHouseholdResponse({}));
    }
    async recognizeHousehold(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeHouseholdWithOptions(request, runtime);
    }
    async recognizeIdcardWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.outputFigure)) {
            query["OutputFigure"] = request.outputFigure;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeIdcard",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeIdcardResponse({}));
    }
    async recognizeIdcard(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeIdcardWithOptions(request, runtime);
    }
    async recognizeInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeInvoiceResponse({}));
    }
    async recognizeInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeInvoiceWithOptions(request, runtime);
    }
    async recognizeJanpaneseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeJanpanese",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeJanpaneseResponse({}));
    }
    async recognizeJanpanese(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeJanpaneseWithOptions(request, runtime);
    }
    async recognizeKoreanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeKorean",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeKoreanResponse({}));
    }
    async recognizeKorean(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeKoreanWithOptions(request, runtime);
    }
    async recognizeLatinWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeLatin",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeLatinResponse({}));
    }
    async recognizeLatin(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeLatinWithOptions(request, runtime);
    }
    async recognizeMedicalDeviceManageLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeMedicalDeviceManageLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeMedicalDeviceManageLicenseResponse({}));
    }
    async recognizeMedicalDeviceManageLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeMedicalDeviceManageLicenseWithOptions(request, runtime);
    }
    async recognizeMedicalDeviceProduceLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeMedicalDeviceProduceLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeMedicalDeviceProduceLicenseResponse({}));
    }
    async recognizeMedicalDeviceProduceLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeMedicalDeviceProduceLicenseWithOptions(request, runtime);
    }
    async recognizeMixedInvoicesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeMixedInvoices",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeMixedInvoicesResponse({}));
    }
    async recognizeMixedInvoices(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeMixedInvoicesWithOptions(request, runtime);
    }
    async recognizeMultiLanguageWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new RecognizeMultiLanguageShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.languages)) {
            request.languagesShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.languages, "Languages", "simple");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.languagesShrink)) {
            query["Languages"] = request.languagesShrink;
        }
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.needSortPage)) {
            query["NeedSortPage"] = request.needSortPage;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: tmpReq.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeMultiLanguage",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeMultiLanguageResponse({}));
    }
    async recognizeMultiLanguage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeMultiLanguageWithOptions(request, runtime);
    }
    async recognizeNonTaxInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeNonTaxInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeNonTaxInvoiceResponse({}));
    }
    async recognizeNonTaxInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeNonTaxInvoiceWithOptions(request, runtime);
    }
    async recognizePassportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizePassport",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizePassportResponse({}));
    }
    async recognizePassport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizePassportWithOptions(request, runtime);
    }
    async recognizePaymentRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizePaymentRecord",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizePaymentRecordResponse({}));
    }
    async recognizePaymentRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizePaymentRecordWithOptions(request, runtime);
    }
    async recognizePurchaseRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizePurchaseRecord",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizePurchaseRecordResponse({}));
    }
    async recognizePurchaseRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizePurchaseRecordWithOptions(request, runtime);
    }
    async recognizeQuotaInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeQuotaInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeQuotaInvoiceResponse({}));
    }
    async recognizeQuotaInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeQuotaInvoiceWithOptions(request, runtime);
    }
    async recognizeRideHailingItineraryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeRideHailingItinerary",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeRideHailingItineraryResponse({}));
    }
    async recognizeRideHailingItinerary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeRideHailingItineraryWithOptions(request, runtime);
    }
    async recognizeRollTicketWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeRollTicket",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeRollTicketResponse({}));
    }
    async recognizeRollTicket(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeRollTicketWithOptions(request, runtime);
    }
    async recognizeRussianWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeRussian",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeRussianResponse({}));
    }
    async recognizeRussian(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeRussianWithOptions(request, runtime);
    }
    async recognizeShoppingReceiptWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeShoppingReceipt",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeShoppingReceiptResponse({}));
    }
    async recognizeShoppingReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeShoppingReceiptWithOptions(request, runtime);
    }
    async recognizeSocialSecurityCardWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeSocialSecurityCard",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeSocialSecurityCardResponse({}));
    }
    async recognizeSocialSecurityCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeSocialSecurityCardWithOptions(request, runtime);
    }
    async recognizeSocialSecurityCardVersionIIWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeSocialSecurityCardVersionII",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeSocialSecurityCardVersionIIResponse({}));
    }
    async recognizeSocialSecurityCardVersionII(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeSocialSecurityCardVersionIIWithOptions(request, runtime);
    }
    async recognizeTableOcrWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.lineLess)) {
            query["LineLess"] = request.lineLess;
        }
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.skipDetection)) {
            query["SkipDetection"] = request.skipDetection;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTableOcr",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTableOcrResponse({}));
    }
    async recognizeTableOcr(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTableOcrWithOptions(request, runtime);
    }
    async recognizeTaxClearanceCertificateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTaxClearanceCertificate",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTaxClearanceCertificateResponse({}));
    }
    async recognizeTaxClearanceCertificate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTaxClearanceCertificateWithOptions(request, runtime);
    }
    async recognizeTaxiInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTaxiInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTaxiInvoiceResponse({}));
    }
    async recognizeTaxiInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTaxiInvoiceWithOptions(request, runtime);
    }
    async recognizeThaiWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.needRotate)) {
            query["NeedRotate"] = request.needRotate;
        }
        if (!tea_util_1.default.isUnset(request.outputCharInfo)) {
            query["OutputCharInfo"] = request.outputCharInfo;
        }
        if (!tea_util_1.default.isUnset(request.outputTable)) {
            query["OutputTable"] = request.outputTable;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeThai",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeThaiResponse({}));
    }
    async recognizeThai(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeThaiWithOptions(request, runtime);
    }
    async recognizeTollInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTollInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTollInvoiceResponse({}));
    }
    async recognizeTollInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTollInvoiceWithOptions(request, runtime);
    }
    async recognizeTradeMarkCertificationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTradeMarkCertification",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTradeMarkCertificationResponse({}));
    }
    async recognizeTradeMarkCertification(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTradeMarkCertificationWithOptions(request, runtime);
    }
    async recognizeTrainInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTrainInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTrainInvoiceResponse({}));
    }
    async recognizeTrainInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTrainInvoiceWithOptions(request, runtime);
    }
    async recognizeTravelCardWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeTravelCard",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeTravelCardResponse({}));
    }
    async recognizeTravelCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeTravelCardWithOptions(request, runtime);
    }
    async recognizeUsedCarInvoiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeUsedCarInvoice",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeUsedCarInvoiceResponse({}));
    }
    async recognizeUsedCarInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeUsedCarInvoiceWithOptions(request, runtime);
    }
    async recognizeVehicleCertificationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeVehicleCertification",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeVehicleCertificationResponse({}));
    }
    async recognizeVehicleCertification(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeVehicleCertificationWithOptions(request, runtime);
    }
    async recognizeVehicleLicenseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeVehicleLicense",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeVehicleLicenseResponse({}));
    }
    async recognizeVehicleLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeVehicleLicenseWithOptions(request, runtime);
    }
    async recognizeVehicleRegistrationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeVehicleRegistration",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeVehicleRegistrationResponse({}));
    }
    async recognizeVehicleRegistration(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeVehicleRegistrationWithOptions(request, runtime);
    }
    async recognizeWaybillWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.url)) {
            query["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.body,
            stream: request.body,
        });
        let params = new $OpenApi.Params({
            action: "RecognizeWaybill",
            version: "2021-07-07",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RecognizeWaybillResponse({}));
    }
    async recognizeWaybill(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.recognizeWaybillWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map